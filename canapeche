#!/usr/bin/env python
"""
Usage: canapeche [-h] [-i IF]

Options:
    -h --help               Show this message.
    -i IF --interface=IF    Choose a CAN interface [default: vcan0]
"""
import socket
import struct
import sys
import time
from docopt import docopt
from gi.repository import GLib, Gtk


class CANFrame:
    """ A CAN frame object for composability purposes"""
    FRAME_FMT = '=IB3x8s'
    FRAME_SIZ = struct.calcsize(FRAME_FMT)

    def __init__(self, can_id, data):
        self.can_dlc = len(data)
        self.can_id = can_id
        self.data = data.ljust(8, b'\x00')

    @classmethod
    def unpack(cls, frame):
        """ Construct a CANFrame object from a network frame """
        can_id, can_dlc, data = struct.unpack(cls.FRAME_FMT, frame)
        return cls(can_id, data[:can_dlc])

    def pack(self):
        """ Serialize a CANFrame object to CAN wire format """
        return struct.pack(
                self.FRAME_FMT, self.can_id, self.can_dlc, self.data)

    def __str__(self):
        return 'CAN-id: 0x{:03X}, DLC: 0x{:03X}, Data: {}'.format(
                self.can_id, self.can_dlc, self.data)


class Canapeche:

    connected = False

    def __init__(self, interface):
        self.interface = interface
        builder = Gtk.Builder()
        builder.add_from_file('window.ui')

        window = builder.get_object('window')
        plugit = builder.get_object('connect')
        sendit = builder.get_object('send-button')
        self.canid_entry = builder.get_object('canid-entry')
        self.frame_entry = builder.get_object('frame-entry')
        self.logscroll = builder.get_object('scrolledwindow')
        self.logview = builder.get_object('textview')

        window.connect("delete-event", Gtk.main_quit)
        plugit.connect("clicked", self.on_can_click)
        sendit.connect("clicked", self.send_frame)

        self.s = socket.socket(socket.AF_CAN, socket.SOCK_RAW, socket.CAN_RAW)

    def on_can_click(self, button):
        """ Bus connection button clicked """
        if not self.connected:
            self.s.bind((self.interface,))
            self.journalize('Bound to CAN interface {}'.format(self.interface))
            GLib.io_add_watch(self.s, GLib.IO_IN, self.can_receive)
            self.connected = True

    def run(self):
        """ Run the application """
        Gtk.main()

    def journalize(self, msg):
        """ Append a message to the log view """
        buf = self.logview.get_buffer()
        end = buf.get_end_iter()
        buf.insert(end, "{}\t{}\n".format(time.strftime('%T'), msg))
        vadj = self.logscroll.get_vadjustment()
        vadj.set_value(vadj.get_upper() - vadj.get_page_size())
        self.logscroll.set_vadjustment(vadj)

    def send_frame(self, button):
        if self.connected:
            can_id = self.canid_entry.get_value_as_int()
            data = self.frame_entry.get_text()
            frame = CANFrame(can_id, str.encode(data))
            self.s.send(frame.pack())

    def can_receive(self, source, cb_condition):
        """ Receive a CAN frame from the bus """
        cf, addr = source.recvfrom(CANFrame.FRAME_SIZ)
        di = CANFrame.unpack(cf)
        self.journalize(str(di))
        return True

if __name__ == '__main__':
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    args = docopt(__doc__)
    if not args['--interface'] in [name for i, name in socket.if_nameindex()]:
        sys.exit("Unknown CAN interface: {}".format(args['--interface']))
    c = Canapeche(args['--interface'])
    c.run()
